class Solution {
public:
    int minOperations(vector<int>& nums, int x) 
    {
        int n=nums.size();
        int sum=0;
        
        unordered_map<int,int> mp;
        
        for(int i=0;i<n;i++)//storing prefix sum values in map with indexes
        {
            sum+=nums[i];
            mp[sum]=i;
        }
        int rest=sum-x;
        mp[0]=0;//to handle the edge cases
        int val=0;
        int longest=0;
        
        for(int i=0;i<n;i++)
        {
            val+=nums[i];
            
            if(mp.count(val-rest))
            {
                if((val-rest)==0)
                    longest=max(longest,i-mp[val-rest]+1);
                else
                    longest=max(longest,i-mp[val-rest]);
            }
        }
        if(longest==0)
        {
            if(rest==0)
                return n;
            else
                return -1;
        }
        return n-longest;
    }
};





Explanation
This is a slighty tricky variant of Sliding Window problem.

Trick to make this question easy :

Total = Sum of all elements of the nums array.
Now find max operation to find (total-x) in the array
Check result :

If the result comes to 0 then return -1
else return size-result
Time Complexity : O(n)
Space Complexity: O(1)

class Solution {
public:
    int minOperations(vector<int>& n, int x) {
          int size = n.size();
          int total = 0;
          int len = 0;
          for(int i : n) total += i;
          if(total == x) return size;
          int need = total - x;
          int i = 0 , j = 0;
          int sum = 0;
          while( j < size ) {
                sum += n[j];  
                while(i < j && sum > need){
                        sum -= n[i++];
                }
                if(sum == need){
                    
                    len = max(len, j-i+1);
                }
                j++;
          } 
          if(len == 0) return -1;  
          return size-len;
    }
};
